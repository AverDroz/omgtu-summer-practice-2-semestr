#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"languageName":"csharp","name":"csharp"}]}}

#!markdown

# Практическая работа №8. Реализация планировщика команд.

**Цель:** Реализация длительных операций.

**Результаты:** После выполнения работы Вы сможете:
1. Сделать возможным в потоке выполнять длительные операции.

## Задание.
Пусть, в условиях практической работы №7, у нас есть поток с очередью, который в цикле извлекает команды из очереди и выполняет их.

Некоторые из команд не могут выполнить всю работу за один вызов метода Execute без блокирования на длительное время выполнения всех остальных командд из очереди.

Например, если какая-нибудь сетевая игра представлена командой, то пока одна игра не закончится, следующая не начнется. Чтобы эффективнее использовать процессорные
можности, нужно обеспечить возхможность поиграть как можно большему количеству игроков.

Для этого используют режим псевдопараллельной обработки. Когда все время работы разбивают на небольшие отрезки, каждый из которых выполняется
за один вызов метода Execute. Чтобы выполнить всю работу, нужно вызвать метод Execute несколько раз, до тех пор пока работа не будет завершена.
Это позволяет между вызовами Execute одного экземплыра команды вызывать метод Execute других команд.

Так устроен, например, ренедринг страницы в браузере. Только в браузеоре это используется не для рендеренга всех вкладок, а для обработки 
реакций пользователя на странице.

В прошлой работе все команды, которые выполнялись в потоке, брались из очереди. Поэтому первая идея - это положить долгоиграющую операцию обратно в очередь.
Но это может привести к состоянию мертвой блокировки потока: если очередь будет полна, то поток, который попытается сделать запись, будет заблокирован до тех пор, 
пока в очереди не появится свободное место. Поэтому нельзя в одном и том же потоке читать и писать в очередь неблокируемым образом.

Чтобы избежать мертвой блокировки потока, необходимо ввести понятие Планировщика, который будет отвечать за выбор следующей длительной задачи для выполнения,
а чтение из очереди оставить только для новых операций. 

#!markdown

Необходимо реализовать поток, который способен реализоввывать длительные операции.

**Указание.** 
1. В практической работе №7 из очереди команды извлекались блокируеммым образом с помощью метода Take(), при наличии планировщика так делать нельзя: поток
может заснуть несмотря на наличие команд в планировщике до тех пор, пока не будет записана новая команда в очередь.

С другой стороны, если будем всегда читать неблокируемым образом, а в планировщике нет никакой работы, то будем тратить процессорное время без полезной нагрузки.

Необходимо учесть этот момент при реализации очереди.

2. Для обепечения справедливости стратегии планировщика в слабом смысле использовать стратегию Round Robbin (циклическую) для определения следующего потока на исполнение.

#!csharp

using System;
using System.Collections.Concurrent;
using System.Collections.Generic;
using System.Threading;

public interface ICommand
{
    void Execute();
    bool IsCompleted { get; }
}

public interface IScheduler
{
    bool HasCommand();
    ICommand Select();
    void Add(ICommand cmd);
}

public class RoundRobinScheduler : IScheduler
{
    private readonly Queue<ICommand> commandQueue = new Queue<ICommand>();

    public bool HasCommand()
    {
        return commandQueue.Count > 0;
    }

    public ICommand Select()
    {
        int initialCount = commandQueue.Count;
        if (initialCount > 0)
        {
            for (int i = 0; i < initialCount; i++)
            {
                ICommand cmd = commandQueue.Dequeue();
                return cmd;
            }
        }
        return null;
    }

    public void Add(ICommand cmd)
    {
        commandQueue.Enqueue(cmd);
    }
}

public class ServerThread
{
    private readonly Thread thread;
    private readonly AutoResetEvent newCommandEvent = new AutoResetEvent(false);
    private readonly IScheduler scheduler;
    private bool stopImmediately = false;
    private bool stopWhenQueueIsEmpty = false;

    public Thread Thread => thread;

    public ServerThread(IScheduler scheduler)
    {
        this.scheduler = scheduler;
        thread = new Thread(Run);
        thread.Start();
    }

    private void Run()
    {
        while (!stopImmediately)
        {
            if (stopWhenQueueIsEmpty && !scheduler.HasCommand())
            {
                break;
            }

            if (scheduler.HasCommand())
            {
                ICommand command = scheduler.Select();
                if (command != null)
                {
                    try
                    {
                        command.Execute(); // работа
                        Thread.Sleep(100); // имитация работы
                        if (!command.IsCompleted)
                        {
                            EnqueueCommand(command);
                        }
                    }
                    catch (Exception ex)
                    {
                        HandleException(ex);
                    }
                }
            }
            else
            {
                newCommandEvent.WaitOne();
            }
        }
    }

    public void EnqueueCommand(ICommand command)
    {
        scheduler.Add(command);
        newCommandEvent.Set();
    }

    public void StopImmediately()
    {
        stopImmediately = true;
        newCommandEvent.Set();
    }

    public void StopWhenQueueIsEmpty()
    {
        stopWhenQueueIsEmpty = true;
        newCommandEvent.Set();
    }

    private void HandleException(Exception ex)
    {
        Console.WriteLine($"Exception handled: {ex.Message}");
    }
}

public class LongRunningCommand : ICommand
{
    private int remainingWork = 5;

    public bool IsCompleted => remainingWork <= 0;

    public int Id { get; }

    public LongRunningCommand(int id, int rw)
    {
        Id = id;
        remainingWork = rw;
    }

    public void Execute()
    {
        if (remainingWork > 0)
        {
            Console.WriteLine($"Команда номер {Id}, оставшееся время - {remainingWork - 1}");
            remainingWork--;
        }
    }
}

private class SoftStopCommand : ICommand
{
    private readonly ServerThread serverThread;

    public bool IsCompleted => true;

    public SoftStopCommand(ServerThread serverThread)
    {
        this.serverThread = serverThread;
    }

    public void Execute()
    {
        if (Thread.CurrentThread != serverThread.Thread)
        {
            throw new InvalidOperationException("SoftStopCommand can only be executed in its own thread.");
        }
        serverThread.StopWhenQueueIsEmpty();
    }
}

private class HardStopCommand : ICommand
{
    private readonly ServerThread serverThread;

    public bool IsCompleted => true;

    public HardStopCommand(ServerThread serverThread)
    {
        this.serverThread = serverThread;
    }

    public void Execute()
    {
        if (Thread.CurrentThread != serverThread.Thread)
        {
            throw new InvalidOperationException("HardStopCommand can only be executed in its own thread.");
        }
        serverThread.StopImmediately();
    }
}

IScheduler scheduler = new RoundRobinScheduler();
ServerThread serverThread = new ServerThread(scheduler);


serverThread.EnqueueCommand(new LongRunningCommand(1,4));
serverThread.EnqueueCommand(new LongRunningCommand(2,2));
serverThread.EnqueueCommand(new LongRunningCommand(3, 6));
serverThread.EnqueueCommand(new LongRunningCommand(4, 2));
serverThread.EnqueueCommand(new LongRunningCommand(5, 3));

serverThread.EnqueueCommand(new SoftStopCommand(serverThread));

serverThread.Thread.Join();
Console.WriteLine("Server thread stopped.");

IScheduler scheduler2 = new RoundRobinScheduler();
ServerThread serverThread2 = new ServerThread(scheduler2);


serverThread2.EnqueueCommand(new LongRunningCommand(1,4));
serverThread2.EnqueueCommand(new LongRunningCommand(2,2));
serverThread2.EnqueueCommand(new LongRunningCommand(3, 6));

serverThread2.EnqueueCommand(new HardStopCommand(serverThread2));

serverThread2.EnqueueCommand(new LongRunningCommand(4, 2));
serverThread2.EnqueueCommand(new LongRunningCommand(5, 3));



serverThread2.Thread.Join();
Console.WriteLine("Server thread stopped.");
