#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"languageName":"csharp","name":"csharp"}]}}

#!markdown

# Практическая работа №1. Знакомство с потоками.

**Цель:** Познакомиться с возможностями класса System.Thread платформы .NET Framework.

**Результаты:** После выполнения работы Вы сможете:
1. Запускать длительные операции в отдельном потоке.
2. Завершать поток.
3. Дожидаться завершения выполнения потока. 


**Материалы для самостоятельного изучения**.
1. [Основы управления потоками](https://learn.microsoft.com/en-us/dotnet/standard/threading/managed-threading-basics)
2. [Использование потоков](https://learn.microsoft.com/en-us/dotnet/standard/threading/using-threads-and-threading)
3. [Примитив синхронизации Барьер](https://learn.microsoft.com/ru-ru/dotnet/standard/threading/barrier)
4. [Interlocked операции](https://learn.microsoft.com/en-us/dotnet/api/system.threading.interlocked?view=net-8.0)

## Задание.
Реализовать вычисление определенного интеграла методом трапеции в несколько потоков.

Отрезок, на котором происходит вычисление, разбивается на отрезки по количеству потоков. Для каждого отрезка значение 
интеграла считается в отдельном потоке, после завершения вычисоения полученный рельтаты суммирутся.

**Указание**.
1. Для суммирования результатов удобно воспользоваться разделяемой переменной, к которой будут прибалятся результаты вычисления прямо в самом потоке. Для синхронизации операций сложения лучше всего восользоваться [Interlocked операцией](https://learn.microsoft.com/en-us/dotnet/api/system.threading.interlocked?view=net-8.0).
2. Основная функция долна дождаться завершения всех потоков, которые вычисляют значение на отрезках, прежде чем возвратить результат. Для этого удобнее всего использовать Примитив синхронизации Барьер](https://learn.microsoft.com/ru-ru/dotnet/standard/threading/barrier).

#!csharp

using System;
using System.Diagnostics;
using System.Threading;

class DefiniteIntegral
{
    public static double Solve(double a, double b, Func<double, double> function, double step, int threadsNumber)
    {
        int totalSteps = (int)Math.Ceiling((b - a) / step);
        int stepsPerThread = totalSteps / threadsNumber;
        double integralSum = 0.0;
        object lockObj = new object();
        CountdownEvent countdownEvent = new CountdownEvent(threadsNumber);

        void ComputeIntegral(int threadIndex)
        {
            double localSum = 0.0;
            int startStep = threadIndex * stepsPerThread;
            int endStep = (threadIndex == threadsNumber - 1) ? totalSteps : startStep + stepsPerThread;

            for (int i = startStep; i < endStep; i++)
            {
                double x1 = a + i * step;
                double x2 = a + (i + 1) * step;
                double y1 = function(x1);
                double y2 = function(x2);
                localSum += (y1 + y2) * step / 2.0;
            }

            lock (lockObj)
            {
                integralSum += localSum;
            }

            countdownEvent.Signal();
        }

        Thread[] threads = new Thread[threadsNumber];
        for (int i = 0; i < threadsNumber; i++)
        {
            int threadIndex = i;
            threads[i] = new Thread(() => ComputeIntegral(threadIndex));
            threads[i].Start();
        } countdownEvent.Wait();

        return integralSum;
    }
}

class DefiniteIntegralNoTheads
{
    public static double SolveSingleThreaded(double a, double b, Func<double, double> function, double step)
    {
        int totalSteps = (int)Math.Ceiling((b - a) / step);
        double integralSum = 0.0;

        for (int i = 0; i < totalSteps; i++)
        {
            double x1 = a + i * step;
            double x2 = a + (i + 1) * step;
            double y1 = function(x1);
            double y2 = function(x2);
            integralSum += (y1 + y2) * step / 2.0;
        }

        return integralSum;
    }
}

#!csharp

#r "nuget: xunit, 2.8.1"
#r "nuget:ScottPlot, 5.0.35"

using Microsoft.DotNet.Interactive.Formatting;
using Xunit;

List<double> dataX = new List<double>();
List<double> dataY = new List<double>();

Func<double, double> sinFunction = Math.Sin;

List<double> steps = new List<double> {1e-1, 1e-2, 1e-3, 1e-4, 1e-5, 1e-6};

double count = 0;
double timecount = 0;
int iterations = 100;

foreach(double i in steps)
{
    for(int j = 0; j < 10; j++)
    {
        Stopwatch stopwatch = new Stopwatch();
        stopwatch.Start();

        double result = DefiniteIntegral.Solve(0, 10, sinFunction, i, 1);

        stopwatch.Stop();
        
        count += result;
        timecount += stopwatch.ElapsedMilliseconds;
    }
    Console.WriteLine($"Средний результат(10 прогонов): {count/10}, Среднее время: {timecount/10} ms, шаг - {i}");
    count = 0;
    timecount = 0;
}

Console.WriteLine();
Console.WriteLine("1e-2 - best (4 верных числа после запятой)");
Console.WriteLine();

for(int j = 0; j < iterations; j++)
    {
        Stopwatch stopwatch = new Stopwatch();
        stopwatch.Start();

        double NoTheadsResult = DefiniteIntegralNoTheads.SolveSingleThreaded(-1000, 1000, sinFunction, 1e-2);

        stopwatch.Stop();
        
        count += NoTheadsResult;
        timecount += stopwatch.ElapsedMilliseconds;
    }
    Console.WriteLine($"Средний результат({iterations} прогонов): {count/iterations}, Среднее время: {timecount/iterations} ms, потоков - 1 (без потоков)");
    dataX.Add(1);
    dataY.Add(timecount/iterations);
    count = 0;
    timecount = 0;


for(int i = 2; i < 65;i++)
{
    for(int j = 0; j < iterations; j++)
    {
        Stopwatch stopwatch = new Stopwatch();
        stopwatch.Start();

        double result = DefiniteIntegral.Solve(-1000, 1000, sinFunction, 1e-2, i);

        stopwatch.Stop();
        
        count += result;
        timecount += stopwatch.ElapsedMilliseconds;
    }
    Console.WriteLine($"Средний результат({iterations} прогонов): {count/iterations}, Среднее время: {timecount/iterations} ms, потоков - {i}");
    dataX.Add(i);
    dataY.Add(timecount/iterations);
    count = 0;
    timecount = 0;
}
Console.WriteLine();

Console.WriteLine($"Лучшее время - {dataY.Min()} (при {dataX[dataY.IndexOf(dataY.Min())]} потоках), время с 1 потоком - {dataY[dataX.IndexOf(1)]}, разница во времени - {((dataY[dataX.IndexOf(1)] - dataY.Min()) / dataY[dataX.IndexOf(1)]) * 100:+0.00;-0.00} %");
Formatter.Register(typeof(ScottPlot.Plot), (p, w) => w.Write(((ScottPlot.Plot)p).GetImageHtml(900, 600)), HtmlFormatter.MimeType);
ScottPlot.Plot plt = new();
plt.Add.Scatter(dataX, dataY);

#!csharp

plt

#!markdown

Мой график:
![alt text](image.png)

#!markdown

<details>
<summary>1e-2</summary>

Мои результаты: 

{поиск точности sin(x) от 0 до 10}

Средний результат(10 прогонов): 1.8375387139814552, Среднее время: 0 ms, шаг - 0.1

Средний результат(10 прогонов): 1.8390562034548368, Среднее время: 0 ms, шаг - 0.01

Средний результат(10 прогонов): 1.8390713758204877, Среднее время: 0 ms, шаг - 0.001

Средний результат(10 прогонов): 1.8390715275438798, Среднее время: 2 ms, шаг - 0.0001

Средний результат(10 прогонов): 1.8390715290611133, Среднее время: 18.6 ms, шаг - 1E-05

Средний результат(10 прогонов): 1.8390715290763855, Среднее время: 193.4 ms, шаг - 1E-06


1e-2 - best (4 верных числа после запятой)
</details>

<details>
<summary>Лучшее время - 1.07 ms (при 11 потоках), время с 1 потоком - 3.14 ms, разница во времени - +65.92 %</summary>

{Конечные результаты просчетов sin(x) от -1000 до 1000}


Средний результат(100 прогонов): 4.1017536589471604E-14, Среднее время: 3.14 ms, потоков - 1 (без потоков)

Средний результат(100 прогонов): 5.079270337660091E-14, Среднее время: 2 ms, потоков - 2

Средний результат(100 прогонов): 5.2462201249880993E-14, Среднее время: 1.09 ms, потоков - 3

Средний результат(100 прогонов): 3.688827021619545E-14, Среднее время: 1.11 ms, потоков - 4

Средний результат(100 прогонов): 2.907733082091468E-14, Среднее время: 1.15 ms, потоков - 5

Средний результат(100 прогонов): 5.907163647123071E-14, Среднее время: 1.09 ms, потоков - 6

Средний результат(100 прогонов): 6.316017153729092E-14, Среднее время: 1.32 ms, потоков - 7

Средний результат(100 прогонов): 5.4627413703656205E-14, Среднее время: 1.75 ms, потоков - 8

Средний результат(100 прогонов): 4.1466829969749597E-14, Среднее время: 1.41 ms, потоков - 9

Средний результат(100 прогонов): 4.480193993572357E-14, Среднее время: 1.17 ms, потоков - 10

Средний результат(100 прогонов): 2.8479996139196826E-14, Среднее время: 1.07 ms, потоков - 11

Средний результат(100 прогонов): 3.2893687773594135E-14, Среднее время: 1.09 ms, потоков - 12

Средний результат(100 прогонов): 4.196976099990479E-14, Среднее время: 1.1 ms, потоков - 13

Средний результат(100 прогонов): 4.3085535139653073E-14, Среднее время: 1.11 ms, потоков - 14

Средний результат(100 прогонов): 5.0778270477280785E-14, Среднее время: 1.21 ms, потоков - 15

Средний результат(100 прогонов): 4.9960036108132044E-14, Среднее время: 1.66 ms, потоков - 16

Средний результат(100 прогонов): 1.714239861172473E-14, Среднее время: 1.11 ms, потоков - 17

Средний результат(100 прогонов): 5.196287844455583E-14, Среднее время: 1.27 ms, потоков - 18

Средний результат(100 прогонов): 2.888300709713576E-14, Среднее время: 1.49 ms, потоков - 19

Средний результат(100 прогонов): 3.5397795805636176E-14, Среднее время: 1.74 ms, потоков - 20

Средний результат(100 прогонов): 6.207589997586638E-14, Среднее время: 1.78 ms, потоков - 21

Средний результат(100 прогонов): 4.0879521989722887E-14, Среднее время: 1.49 ms, потоков - 22

Средний результат(100 прогонов): 2.3751001165805975E-14, Среднее время: 2.37 ms, потоков - 23

Средний результат(100 прогонов): 1.659561377209684E-14, Среднее время: 2.09 ms, потоков - 24

Средний результат(100 прогонов): 5.397682301122586E-14, Среднее время: 1.97 ms, потоков - 25

Средний результат(100 прогонов): 1.9905466164260587E-14, Среднее время: 1.79 ms, потоков - 26

Средний результат(100 прогонов): 3.177236251872273E-14, Среднее время: 2.35 ms, потоков - 27

Средний результат(100 прогонов): 6.051603662626804E-14, Среднее время: 2.32 ms, потоков - 28

Средний результат(100 прогонов): 2.3563373474644323E-14, Среднее время: 2.33 ms, потоков - 29

Средний результат(100 прогонов): 1.6215917497675037E-14, Среднее время: 2.36 ms, потоков - 30

Средний результат(100 прогонов): 8.476774837617995E-14, Среднее время: 2.07 ms, потоков - 31

Средний результат(100 прогонов): 2.4575896873102467E-14, Среднее время: 2.33 ms, потоков - 32

Средний результат(100 прогонов): 9.332534744999066E-15, Среднее время: 2.24 ms, потоков - 33

Средний результат(100 прогонов): 5.133671265866724E-15, Среднее время: 2.69 ms, потоков - 34

Средний результат(100 прогонов): 5.230135768918842E-14, Среднее время: 3.14 ms, потоков - 35

Средний результат(100 прогонов): 2.6412205755832475E-14, Среднее время: 2.64 ms, потоков - 36

Средний результат(100 прогонов): 2.1975754549430348E-14, Среднее время: 3.09 ms, потоков - 37

Средний результат(100 прогонов): 4.6276316112425774E-14, Среднее время: 3.13 ms, потоков - 38

Средний результат(100 прогонов): 2.1886936707460335E-14, Среднее время: 3.5 ms, потоков - 39

Средний результат(100 прогонов): 2.969846590872294E-14, Среднее время: 3.4 ms, потоков - 40

Средний результат(100 прогонов): 7.279565839013457E-14, Среднее время: 3.22 ms, потоков - 41

Средний результат(100 прогонов): 5.663913782427699E-14, Среднее время: 3.58 ms, потоков - 42

Средний результат(100 прогонов): 1.3759549055691878E-14, Среднее время: 3.88 ms, потоков - 43

Средний результат(100 прогонов): 5.1416371160684094E-14, Среднее время: 3.39 ms, потоков - 44

Средний результат(100 прогонов): 5.644262834891833E-14, Среднее время: 3.54 ms, потоков - 45

Средний результат(100 прогонов): 8.40258418399742E-15, Среднее время: 3.32 ms, потоков - 46

Средний результат(100 прогонов): 9.778844400898379E-15, Среднее время: 3.49 ms, потоков - 47

Средний результат(100 прогонов): 3.51252360530907E-14, Среднее время: 3.46 ms, потоков - 48

Средний результат(100 прогонов): 4.22040180581007E-14, Среднее время: 3.7 ms, потоков - 49

Средний результат(100 прогонов): 1.7431611709639582E-14, Среднее время: 4.67 ms, потоков - 50

Средний результат(100 прогонов): -1.771971458452981E-14, Среднее время: 4.28 ms, потоков - 51

Средний результат(100 прогонов): 3.080757871032347E-14, Среднее время: 3.75 ms, потоков - 52

Средний результат(100 прогонов): 6.084237280656879E-14, Среднее время: 3.92 ms, потоков - 53

Средний результат(100 прогонов): 2.0672352718520414E-14, Среднее время: 4.06 ms, потоков - 54

Средний результат(100 прогонов): 2.5540680681501727E-14, Среднее время: 4.05 ms, потоков - 55

Средний результат(100 прогонов): 6.080913550476908E-14, Среднее время: 5.33 ms, потоков - 56

Средний результат(100 прогонов): 5.968558980384841E-15, Среднее время: 5.13 ms, потоков - 57

Средний результат(100 прогонов): 6.729283796857999E-14, Среднее время: 4.59 ms, потоков - 58

Средний результат(100 прогонов): 4.451994328746878E-14, Среднее время: 4.32 ms, потоков - 59

Средний результат(100 прогонов): 2.880251592785044E-14, Среднее время: 4.42 ms, потоков - 60

Средний результат(100 прогонов): 3.3782698860562735E-14, Среднее время: 4.34 ms, потоков - 61

Средний результат(100 прогонов): 5.795808277753167E-14, Среднее время: 5.93 ms, потоков - 62

Средний результат(100 прогонов): 4.9176912542137077E-14, Среднее время: 4.63 ms, потоков - 63

Средний результат(100 прогонов): 2.905564677746497E-14, Среднее время: 4.44 ms, потоков - 64

</details>
